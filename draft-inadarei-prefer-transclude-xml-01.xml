<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc symrefs="yes" ?>
<rfc ipr="trust200902" docName="draft-inadarei-prefer-transclude-xml-01" category="info">

    <front>
        <title abbrev="Transclude for HTTP Prefer">Transclude Preference for the  HTTP Prefer Header</title>
        <author initials='I.' surname="Nadareishvili" fullname='Irakli Nadareishvili'>
            <organization/>
            <address>
                <uri>http://freshblurbs.com</uri>
            </address>
        </author>
        <date day="15" month="September" year="2016" />
        <abstract><t>The specification for Transclude preference is an extension to the "Prefer Header for HTTP". It works similar to other preferences defined in the Prefer header field, such as: return, respond-async, wait and handling.</t>
        </abstract>
        <note title="Note to Readers">
            <t>Please discuss this draft on the apps-discuss mailing list (<eref target="https://www.ietf.org/mailman/listinfo/apps-discuss"/>).</t>
            <t>Online access to all versions and files is available on GitHub (<eref target="https://github.com/inadarei/draft-prefer-transclude"/>).</t>
        </note>
    </front>

    <middle>
        <section title="Requirements notation">
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
            "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
            and "OPTIONAL" in this document are to be interpreted as
            described in <xref target="RFC2119"/>.</t>
        </section>

        <section title="Introduction" anchor="introduction">
            <t>"Prefer Header for HTTP" <xref target="RFC7240" /> proposes an HTTP header that can be used to indicate that particular server behaviors are preferred by the client but are not required for successful completion of the request. It further defines several standard Preferences, such as the "return" preference. The "return" preference lets the server know that the client would prefer a specific representation of a resource in a response payload, e.g. full representation vs. a minimal one.</t>
            <t>Preferences like the "return" one are critical for mobile scenarios as mobile applications are very sensitive to network latency, throughput and anything that can improve end-user experience, even on resource-constrained networks. Prefer header allows servers to tune and optimize its response payload based on client preferences, for instance: to only send mobile app a minimal response when it doesn't need full resource.</t>
            <t>The size of the payload is not the only preference that can improve user-experience in mobile scenarios, however. Closely related to the size of the payload, is the number of HTTP requests a client needs to make to get all of the required data. This is the challenge that "transclude" preference addresses.</t>
            <t>When server sends hypermedia responses (e.g. in the case of Hypermedia APIs) some of the response data may be referenced via a URI link instead of being embedded in the payload itself. The need to grab data from a link can degrade experience of mobile applications, since they are forced to make multiple requests to per single end-user request. This is sometimes referred to as "chatty interface" and is a significant problem for mobile and Internet of Things scenarios.</t>
            <t>Transclude preference notifies the server that the client would prefer the server to proactively transclude certain content represented by links of indicated link relation types. The notion of "link relation type", in this context is as defined by <xref target="RFC5988" />.</t>
            <t>As a result of using a transclude preference, a client receives all of the required data already embedded in the response output, without the need to make additional network calls.</t>
        </section>
        <section title="Transclude Usage Example" anchor="transclude-example">
        <figure>
            <preamble>
    Following is an example of a client asking server to transclude data represented at the copyright, edit-form and "other-form" links. Since "other-form" is not a standard, IANA link relation type, client is using a URI for identifying the link relation type.
            </preamble>
            <artwork>
Get /blog/1223 HTTP/1.1
Host: api.example.org
Content-Type: application/json  
Prefer: transclude="copyright;edit-form;http://rels.io/other-form"
Vary: Prefer,Accept,Accept-Encoding
            </artwork>
        <postamble>
    As you can see from the example, the transclude preference expects the value to be enclosed in double quotes, if there are multiple link relation types provided. Further, standard link relations SHOULD be indicated by name while custom link relation types SHOULD be indicated with a unique URI representing that link relation. Multiple link relation types MUST be separated by semicolons.
        </postamble>
        </figure>
        <figure>
            <preamble>Example response may look something like the following:</preamble>
            <artwork>
HTTP/1.1 200 OK
Server: nginx/1.4.6 (Ubuntu)
Date: Sat, 27 Jun 2015 11:03:32 GMT
Content-Type: application/json; charset=utf-8
Transfer-Encoding: chunked
Connection: close
Vary: Prefer,Accept,Accept-Encoding
Preference-Applied: transclude="copyright;edit-form"
Access-Control-Allow-Origin: *
Access-Control-Allow-Headers: Content-Type            
        </artwork>
        <postamble>As you can see from this output, the server only transcluded copyright and edit-form link relation types, but not the custom type client requested. This is because preferences are just suggestions and server has no obligation related to them. In this case, we can assume that the server skipped the last link relation type because maybe it wasn't familiar with it, or for some other reason.</postamble>     
    </figure>
    </section>
    <section title="Implementation Considerations" anchor="implementation">
        <t>Transclude preference is media-type agnostic. It should work with any response content-type. The mechanics of transclusion, however will either depend on capabilities of the response media-type or require a multi-part response with multiple media types in the response.</t> 
    </section>
    <section title="Multipart Response Example" anchor="multipart-example">
        <figure>
            <artwork>
HTTP/1.1 200 OK
Server: nginx/1.4.6 (Ubuntu)
Date: Thu, 15 Sep 2016 11:03:32 GMT
Content-type: multipart/mixed; boundary="some boundary string"

--some boundary string
Content-Type: application/hal+json; charset=utf-8

{
    "_links": {
        "self": { "href": "/orders" },
        "edit-form": { "href": "/create" }
    },
    "currentlyProcessing": 14,
    "shippedToday": 20
}

--some boundary string
Content-Type: application/prs.hal-forms+json

{
    "_links" : {
        "self" : { "href" : "/create" }
    },
    "_templates" : {
        "default" : {
            "title" : "Create",
            "method" : "post",
            "contentType" : "application/json",
            "properties" : [
                {"name": "title", "required": true, "prompt": "Title"},
                {"name": "completed", "value": "false", "prompt": "Completed"}
            ]
        }
    }
}
--some boundary string--                
                </artwork>
            </figure>
        </section>
        <section title="IANA Considerations" anchor="IANA">
            <t>The HTTP Preference below has been registered by IANA per Section 5.1 of RFC 7240 <xref target="RFC7240"/>:</t>
            <t>
                <list>
                    <t>Preference: transclude</t>
                    <t>Value:</t>
                    <t>Optional Parameters:</t>
                    <t>Description:</t>
                    <t>Reference: RFC XXXX</t>
                </list>
            </t>
        </section>
        <section title="Security Considerations">
        <t>None.</t>
        </section>
    </middle>

    <back>
        <references title='Normative References'>
            <reference anchor='RFC7240'>
                <front>
                <title>Prefer Header for HTTP (RFC-7240)</title>
                <author initials='J' surname='Snell' fullname='James Snell'>
                    <organization />
                </author>
                <date month='June' year='2014' />
                <abstract>
                    <t>This specification defines an HTTP header field that can be used by a client to request that certain behaviors be employed by a server while processing a request.</t>
                </abstract>
                </front>
                <seriesInfo name="RFC" value="7240" />
            </reference>      
            <reference anchor='RFC2119'>
                <front>
                <title>RFC-2119</title>
                <author initials='S' surname='Bradner' fullname='Scott Bradner'>
                    <organization />
                </author>
                <date month='March' year='1997' />
                <abstract>
                    <t>Key words for use in RFCs to Indicate Requirement Levels.</t>
                </abstract>
                </front>
                <seriesInfo name="RFC" value="2119" />
            </reference>
            <reference anchor='RFC5988'>
                <front>
                <title>Web Linking (RFC-5988)</title>
                <author initials='M' surname='Nottingham' fullname='Mark Nottingham'>
                    <organization />
                </author>
                <date month='October' year='2010' />
                <abstract>
                    <t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.</t>
                </abstract>
                </front>
                <seriesInfo name="RFC" value="5988" />
            
            </reference>  
        </references>
    </back>

</rfc>
